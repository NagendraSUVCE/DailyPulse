@using Models.DailyLog
@model List<DailyLogSummaryForEachDay>

@{
    ViewData["Title"] = "Daily Log Summary";
    var categories = Model.Select(x => x.Category).Distinct().ToList();
}

<h2>Daily Log Summary</h2>
<div>
    <button onclick="setTimeRange('day')">Day</button>
    <button onclick="setTimeRange('week')">Week</button>
    <button onclick="setTimeRange('month')">Month</button>
    <button onclick="setTimeRange('year')">Year</button>
</div>

<table id="summaryTable" class="table table-bordered table-striped" style="margin-top: 10px;">
    <thead>
        <tr id="tableHeader">
            <th>Date</th>
        </tr>
    </thead>
    <tbody>
    </tbody>
</table>

<script>
    const data = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));
    let timeRange = 'month';

    function setTimeRange(range) {
        timeRange = range;
        renderTable();
    }

    function renderTable() {
        const categories = [...new Set(data.map(item => item.Category))];
        const tableHeader = document.querySelector('#tableHeader');
        const tableBody = document.querySelector('#summaryTable tbody');
        tableHeader.innerHTML = '<th>Date</th>';
        tableBody.innerHTML = '';

        categories.forEach(category => {
            const th = document.createElement('th');
            th.innerText = category;
            tableHeader.appendChild(th);
        });

        let groupedData;
        if (timeRange === 'year') {
            groupedData = groupDataByYear(data);
        } else if (timeRange === 'month') {
            groupedData = groupDataByMonth(data);
        } else if (timeRange === 'week') {
            groupedData = groupDataByWeek(data);
        } else if (timeRange === 'day') {
            groupedData = groupDataByDay(data);
        }

        const rows = Object.keys(groupedData).sort((a, b) => new Date(a) - new Date(b));
        rows.forEach(row => {
            const tr = document.createElement('tr');
            const dateCell = document.createElement('td');
            dateCell.innerText = row;
            tr.appendChild(dateCell);

            categories.forEach(category => {
                const cell = document.createElement('td');
                cell.innerText = groupedData[row][category]?.toFixed(2) || '';
                tr.appendChild(cell);
            });

            tableBody.appendChild(tr);
        });
    }

    function groupDataByYear(data) {
        const grouped = {};
        data.forEach(item => {
            const year = new Date(item.ActivityDate).getFullYear();
            if (!grouped[year]) grouped[year] = {};
            grouped[year][item.Category] = (grouped[year][item.Category] || 0) + item.TotalValue;
        });
        return grouped;
    }

    function groupDataByMonth(data) {
        const grouped = {};
        const currentDate = new Date();
        data.forEach(item => {
            const date = new Date(item.ActivityDate);
            const month = `${date.getFullYear()}-${date.toLocaleString('default', { month: 'short' })}`;
            const diffMonths = (currentDate.getFullYear() - date.getFullYear()) * 12 + (currentDate.getMonth() - date.getMonth());
            if (diffMonths >= 0 && diffMonths < 12) {
                if (!grouped[month]) grouped[month] = {};
                grouped[month][item.Category] = (grouped[month][item.Category] || 0) + item.TotalValue;
            }
        });
        return grouped;
    }

    function groupDataByWeek(data) {
        const grouped = {};
        data.forEach(item => {
            const date = new Date(item.ActivityDate);
            const weekNumber = Math.ceil((date.getDate() - date.getDay() + 1) / 7);
            const week = `${date.getFullYear()}-Week${weekNumber}`;
            if (!grouped[week]) grouped[week] = {};
            grouped[week][item.Category] = (grouped[week][item.Category] || 0) + item.TotalValue;
        });
        return grouped;
    }

    function groupDataByDay(data) {
        const grouped = {};
        const currentDate = new Date();
        const pastDate = new Date();
        pastDate.setDate(currentDate.getDate() - 30);

        data.forEach(item => {
            const day = new Date(item.ActivityDate).toISOString().split('T')[0];
            const itemDate = new Date(day);
            if (itemDate >= pastDate && itemDate <= currentDate) {
                if (!grouped[day]) grouped[day] = {};
                grouped[day][item.Category] = (grouped[day][item.Category] || 0) + item.TotalValue;
            }
        });
        return grouped;
    }

    // Initialize the view
    renderTable();
</script>
